#!/bin/sh
# OC4VM QEMU Runner
# {{VERSION}}-{{COMMIT}}
# SPDX-FileCopyrightText: Â© 2023-25 David Parsons
# SPDX-License-Identifier: MIT

# Enable debug mode if DEBUG environment variable is set to any non-empty value
[[ -n "$DEBUG" ]] && set -x

echo "OC4VM QEMU Runner"

OPTSTRING=":a:c:d:m:n:o:sr:v:"

# Setup default accelerator flags
case "$(uname -s)" in
	Linux)
		ACCEL_TYPE="kvm"
		;;
	Darwin)
		ACCEL_TYPE="hvf"
		;;
	*)
		ACCEL_TYPE="tcg"
		;;
esac

CPU="max"
DISK_IMG="macos.qcow2"
MEMORY_SIZE="8"
OPENCORE_IMG="opencore.qcow2"
NUM_CORES="2"
RECOVERY_FLAG=0
RECOVERYOS_IMG=""
SERIAL_FLAG=0
VNC_FLAG=0
VNC_PASSWORD=""

# Experimental Apple Silicon support
if [[ $(uname -m) == 'arm64' ]]; then
  ACCEL_TYPE="tcg"
  CPU="Skylake-Client"
fi

usage () {
	cat <<HELP
 NAME:
	$0

 SYNOPSIS:
	$0 [-a {hvf | kvm | tcg}] [-m <memory-size>] [-d <macos-image>] [-n <number-cores>][-o <opencore-image>] [-r <recovery-image>] [-s] [-v password]
	
 DESCRIPTION:
	Run macOS using QEMU

 OPTIONS:
	-a ACCEL              QEMU accelerator to use.
	-c CPU                CPU type to use.
	-d DISK-IMAGE         species a macOS drive image to use.
	-m MEMORY             specifies amount of memory to allocate to VM.
	-n NUM-CORES          specifies no of cores to present to guest. 
	-o OPENCORE-IMAGE     specifies OpenCore boot image.
	-r RECOVERY-IMAGE     specifies macOS installation/recovery image.
	-s                    enable serial output.
	-v VNC-PASSWORD       enable VNC output on port 5959 with password.
HELP
}

while getopts ${OPTSTRING} opt; do
	case ${opt} in
		a)
			echo "Accelerator: ${OPTARG}"
			ACCEL_TYPE=${OPTARG}
			case ${ACCEL_TYPE} in
				hvf)
					;;
				kvm)
					;;
				tcg)
					;;
				*)
					echo "ERROR: Invalid accelerator option: ${OPTARG}"
					usage
				 	exit 1
					;;
			esac
			;;
		c)
			echo "CPU: ${OPTARG}"
			CPU=${OPTARG}
			;;	
		d)
			echo "macOS image: ${OPTARG}"
			DISK_IMG=${OPTARG}
			if [ ! -f $DISK_IMG ]; then
        		echo "ERROR: $DISK_IMG not found!"
			  	exit 1
			fi
			;;
		m)
			echo "Memory size: ${OPTARG}"
			MEMORY_SIZE=${OPTARG}
			if [ ! -z "${MEMORY_SIZE//[0-9]}" ]; then
        		echo "ERROR: Memory size $MEMORY_SIZE not an integer!"
			  	exit 1
			fi
			if [ "$MEMORY_SIZE" -lt "4" ]; then
    			echo "ERROR: Memory size must be 4GB or greater!"
			  	exit 1
			fi
			;;
		n)
			echo "Number of cores: ${OPTARG}"
			NUM_CORES=${OPTARG}
			if [ ! -z "${NUM_CORES//[0-9]}" ]; then
        		echo "ERROR: Number of cores $NUM_CORES not an integer!"
			  	exit 1
			fi
			valid_values=(1 2 4 8 12 16 24 28 32 64)
			if [[ ! " ${valid_values[@]} " =~ " $NUM_CORES " ]]; then
				echo "Error: Number of cores must be one of: 1, 2, 4, 8, 12, 16, 24, 28, 32, 64"
				exit 1
			fi
			;;
		o)
			echo "OpenCore image: ${OPTARG}"
			OPENCORE_IMG=${OPTARG}
			if [ ! -f $OPENCORE_IMG ]; then
        		echo "ERROR: $OPENCORE_IMG not found!"
			  	exit 1
			fi
			;;
		r)
			echo "Recovery image: ${OPTARG}"
			RECOVERY_FLAG=1
			RECOVERYOS_IMG=${OPTARG}
			if [ ! -f $RECOVERYOS_IMG ]; then
				echo "ERROR: $RECOVERYOS_IMG not found!"
				exit 1
			fi
			;;
		s)
			echo "Serial output enabled"
			SERIAL_FLAG=1
			;;
		v)
			echo "VNC enabled"
			VNC_FLAG=1
			VNC_PASSWORD=${OPTARG}
			if [[ -z $VNC_PASSWORD ]]; then
				echo "ERROR: VNC password not defined!"
				exit 1
			fi
			;;
		:)
			echo "ERROR: Option -${OPTARG} requires an argument."
			usage
			exit 1
			;;
		?)
			echo "ERROR: Invalid option: -${OPTARG}"
			usage
			exit 1
			;;
	esac
done

args=(
-name "{{DESCRIPTION}}"
-cpu $CPU,pdpe1gb=off,vmware-cpuid-freq=on,check

-smp $NUM_CORES
-machine q35,vmport=off,i8042=off,hpet=off,smm=off
-accel $ACCEL_TYPE
-m "$MEMORY_SIZE"G
-nodefaults
-device virtio-net-pci,mac=66:C9:75:99:89:AC,netdev=net0
-netdev user,id=net0
-device virtio-vga
-device virtio-rng-pci
-global ICH9-LPC.disable_s3=1
-drive if=pflash,format=raw,unit=0,file.filename=./edk2-x86_64-code.fd,file.locking=off,readonly=on
-drive if=pflash,format=raw,unit=1,file=./efi_vars.fd
-device virtio-blk,drive=opencore,bootindex=0
-drive if=none,media=disk,id=opencore,file="$OPENCORE_IMG",discard=unmap,detect-zeroes=unmap
-device virtio-blk,drive=macos,bootindex=1
-drive if=none,media=disk,id=macos,file="$DISK_IMG",discard=unmap,detect-zeroes=unmap
-device qemu-xhci
-device usb-tablet
-device usb-kbd
)

if [ $RECOVERY_FLAG = 1 ]; then
args+=(
-device virtio-blk,drive=recoveryos,bootindex=2
-drive if=none,media=disk,id=recoveryos,file="$RECOVERYOS_IMG",discard=unmap,detect-zeroes=unmap
)
fi

if [ $SERIAL_FLAG = 1 ]; then
args+=(
-chardev stdio,id=char0,mux=on,logfile=serial.log,signal=off
-serial chardev:char0
-mon chardev=char0
)
fi

if [ $VNC_FLAG = 1 ]; then
args+=(
-object secret,id=secvnc0,data=$VNC_PASSWORD
-vnc :59,password-secret=secvnc0
)
fi

qemu-system-x86_64 "${args[@]}"
